namespace ifm.IoTCore.Common;

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;

/// <summary>
/// Provides extension methods for event handler types.
/// </summary>
public static class EventHandlerExtensions
{
    /// <summary>
    /// Raises all registered the event handlers, even if an event handler throws an exception.
    /// If the event argument is of type CancelEventArgs and the cancel flag is true, the method returns and following event handlers will not be called.
    /// </summary>
    /// <typeparam name="T">The type of the event data generated by the event.</typeparam>
    /// <param name="eventHandler">The event handler.</param>
    /// <param name="sender">The object that raised the event.</param>
    /// <param name="args">The event argument.</param>
    /// <param name="raiseException">If true and one or more event handlers threw an exception, the method will throw an aggregate exception after all event handler have been called; otherwise not.</param>
    /// <param name="cancelOnException">If true and an exception is thrown the processing loop is canceled; otherwise not</param>
    public static void Raise<T>(this EventHandler<T> eventHandler, object sender, T args = null, bool raiseException = true, bool cancelOnException = false) where T : EventArgs
    {
        if (eventHandler == null) return;

        var exceptions = new List<Exception>();
        var delegates = eventHandler.GetInvocationList();
        foreach (var item in delegates.Cast<EventHandler<T>>())
        {
            try
            {
                item(sender, args);
            }
            catch (Exception e)
            {
                exceptions.Add(e);
                if (cancelOnException) break;
            }
            if (args is CancelEventArgs { Cancel: true })
            {
                break;
            }
        }

        if (raiseException && exceptions.Any())
        {
            throw new AggregateException(exceptions);
        }
    }

    /// <summary>
    /// Raises all registered the event handlers, even if an event handler throws an exception.
    /// If the event argument is of type CancelEventArgs and the cancel flag is true, the method returns and following event handlers will not be called.
    /// </summary>
    /// <typeparam name="T">The type of the event data generated by the event.</typeparam>
    /// <param name="eventHandler">The event handler.</param>
    /// <param name="sender">The object that raised the event.</param>
    /// <param name="args">The event argument.</param>
    /// <param name="raiseException">If true and one or more event handlers threw an exception, the method will throw an aggregate exception after all event handler have been called; otherwise not.</param>
    /// <param name="cancelOnException">If true and an exception is thrown the processing loop is canceled; otherwise not</param>
    public static void Raise(this EventHandler eventHandler, object sender, EventArgs args = null, bool raiseException = true, bool cancelOnException = false)
    {
        if (eventHandler == null) return;

        var exceptions = new List<Exception>();
        var delegates = eventHandler.GetInvocationList();
        foreach (var item in delegates.Cast<EventHandler>())
        {
            try
            {
                item(sender, args);
            }
            catch (Exception e)
            {
                exceptions.Add(e);
                if (cancelOnException) break;
            }
            if (args is CancelEventArgs { Cancel: true })
            {
                break;
            }
        }

        if (raiseException && exceptions.Any())
        {
            throw new AggregateException(exceptions);
        }
    }
}